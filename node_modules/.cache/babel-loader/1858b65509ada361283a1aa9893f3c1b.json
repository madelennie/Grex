{"ast":null,"code":"import _objectSpread from \"/Users/tod/Webb/grextest/Grex/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/tod/Webb/grextest/Grex/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nvar config = {\n  apiKey: \"AIzaSyDlp_TNNMiNHNsWnPyExu1zPsAca2sM6vw\",\n  authDomain: \"fir-auth-ae4f4.firebaseapp.com\",\n  databaseURL: \"https://fir-auth-ae4f4.firebaseio.com\",\n  projectId: \"fir-auth-ae4f4\",\n  storageBucket: \"fir-auth-ae4f4.appspot.com\",\n  messagingSenderId: \"111479692025\"\n}; // const config = {\n//   apiKey: process.env.REACT_APP_API_KEY,\n//   authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n//   databaseURL: process.env.REACT_APP_DATABASE_URL,\n//   projectId: process.env.REACT_APP_PROJECT_ID,\n//   storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n//   messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n//   };\n\nvar Firebase = function Firebase() {\n  var _this = this;\n\n  _classCallCheck(this, Firebase);\n\n  this.doCreateUserWithEmailAndPassword = function (email, password) {\n    return _this.auth.createUserWithEmailAndPassword(email, password);\n  };\n\n  this.doSignInWithEmailAndPassword = function (email, password) {\n    return _this.auth.signInWithEmailAndPassword(email, password);\n  };\n\n  this.doSignInWithGoogle = function () {\n    return _this.auth.signInWithPopup(_this.googleProvider);\n  };\n\n  this.doSignInWithFacebook = function () {\n    return _this.auth.signInWithPopup(_this.facebookProvider);\n  };\n\n  this.doSignOut = function () {\n    return _this.auth.signOut();\n  };\n\n  this.doPasswordReset = function (email) {\n    return _this.auth.sendPasswordResetEmail(email);\n  };\n\n  this.doPasswordUpdate = function (password) {\n    return _this.auth.currentUser.updatePassword(password);\n  };\n\n  this.doSendEmailVerification = function () {\n    return _this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT\n    });\n  };\n\n  this.onAuthUserListener = function (next, fallback) {\n    return _this.auth.onAuthStateChanged(function (authUser) {\n      if (authUser) {\n        _this.user(authUser.uid).once('value').then(function (snapshot) {\n          var dbUser = snapshot.val(); // default empty roles\n\n          if (!dbUser.roles) {\n            dbUser.roles = [];\n          } // merge auth and db user\n\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email\n          }, dbUser, {\n            emailVerified: authUser.emailVerified,\n            providerData: authUser.providerData\n          });\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n  };\n\n  this.user = function (uid) {\n    return _this.db.ref(\"users/\".concat(uid));\n  };\n\n  this.users = function () {\n    return _this.db.ref('users');\n  };\n\n  this.message = function (uid) {\n    return _this.db.ref(\"messages/\".concat(uid));\n  };\n\n  this.messages = function () {\n    return _this.db.ref(\"messages\");\n  };\n\n  this.event = function (uid) {\n    return _this.db.ref(\"events/\".concat(uid));\n  };\n\n  this.events = function () {\n    return _this.db.ref(\"events\");\n  };\n\n  app.initializeApp(config);\n  this.serverValue = app.database.ServerValue;\n  this.emailAuthProvider = app.auth.EmailAuthProvider;\n  this.auth = app.auth();\n  this.db = app.database();\n  this.googleProvider = new app.auth.GoogleAuthProvider();\n  this.facebookProvider = new app.auth.FacebookAuthProvider();\n} // *** Auth API ***\n;\n\nexport default Firebase;","map":{"version":3,"sources":["/Users/tod/Webb/grextest/Grex/src/components/Firebase/firebase.js"],"names":["app","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","googleProvider","doSignInWithFacebook","facebookProvider","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","doSendEmailVerification","sendEmailVerification","url","process","env","REACT_APP_CONFIRMATION_EMAIL_REDIRECT","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","once","then","snapshot","dbUser","val","roles","emailVerified","providerData","db","ref","users","message","messages","event","events","initializeApp","serverValue","database","ServerValue","emailAuthProvider","EmailAuthProvider","GoogleAuthProvider","FacebookAuthProvider"],"mappings":"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","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst config = {\n    apiKey: \"AIzaSyDlp_TNNMiNHNsWnPyExu1zPsAca2sM6vw\",\n    authDomain: \"fir-auth-ae4f4.firebaseapp.com\",\n    databaseURL: \"https://fir-auth-ae4f4.firebaseio.com\",\n    projectId: \"fir-auth-ae4f4\",\n    storageBucket: \"fir-auth-ae4f4.appspot.com\",\n    messagingSenderId: \"111479692025\"\n};\n\n// const config = {\n//   apiKey: process.env.REACT_APP_API_KEY,\n//   authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n//   databaseURL: process.env.REACT_APP_DATABASE_URL,\n//   projectId: process.env.REACT_APP_PROJECT_ID,\n//   storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n//   messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n//   };\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n\n    this.serverValue = app.database.ServerValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n    this.auth = app.auth();\n    this.db = app.database();\n\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n  }\n\n  // *** Auth API ***\n\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n  doSignInWithGoogle = () =>\n    this.auth.signInWithPopup(this.googleProvider);\n\n  doSignInWithFacebook = () =>\n    this.auth.signInWithPopup(this.facebookProvider);\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n  doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n\n  doSendEmailVerification = () =>\n    this.auth.currentUser.sendEmailVerification({\n    url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT,\n    });\n\n\n  // *** Merge Auth and DB User API *** //\n  onAuthUserListener = (next, fallback) =>\n    this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid)\n        .once('value')\n        .then(snapshot => {\n          const dbUser = snapshot.val();\n\n          // default empty roles\n          if (!dbUser.roles) {\n            dbUser.roles = [];\n          }\n\n          // merge auth and db user\n          authUser = {\n            uid: authUser.uid,\n            email: authUser.email,\n            ...dbUser,\n            emailVerified: authUser.emailVerified,\n            providerData: authUser.providerData,\n          };\n\n          next(authUser);\n        });\n      } else {\n        fallback();\n        }\n    });  \n\n  // *** User API ***\n\n  user = uid => this.db.ref(`users/${uid}`);\n\n  users = () => this.db.ref('users');\n\n  // *** Message API ***\n\n  message = uid => this.db.ref(`messages/${uid}`);\n\n  messages = () => this.db.ref(`messages`);\n\n  // *** Event API ***\n\n  event = uid => this.db.ref(`events/${uid}`);\n\n  events = () => this.db.ref(`events`);\n}\n\nexport default Firebase;\n"]},"metadata":{},"sourceType":"module"}